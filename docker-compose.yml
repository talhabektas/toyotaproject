version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - finansal-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - finansal-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - finansal-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: finansal_rates
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - finansal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # TCP Platform Simulator
  tcp-simulator:
    build:
      context: ./demo
    container_name: tcp-simulator
    ports:
      - "8081:8081"
    networks:
      - finansal-network
    volumes:
      - ./demo/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka

  # REST Platform Simulator
  rest-simulator:
    build:
      context: ./platform-simulator-rest
    container_name: rest-simulator
    ports:
      - "8080:8080"
    networks:
      - finansal-network
    volumes:
      - ./platform-simulator-rest/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka

  # Main Application
  main-app:
    build:
      context: ./main-app
    container_name: main-app
    ports:
      - "8090:8090"
    networks:
      - finansal-network
    volumes:
      - ./main-app/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka
      - redis
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/finansal_rates

  # Kafka Consumer Service (bu hizmet için bir dizin görünmekte)
  kafka-consumer:
    build:
      context: ./Kafka-Consumer
    container_name: kafka-consumer
    networks:
      - finansal-network
    restart: unless-stopped
    depends_on:
      - kafka
      - postgres

volumes:
  zookeeper-data:
  kafka-data:
  redis-data:
  postgres-data:

networks:
  finansal-network:
    driver: bridge