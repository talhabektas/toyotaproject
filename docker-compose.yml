version: '3.8'
services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - finansal_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - finansal_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis
  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - finansal_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
    command: [ "redis-server", "--appendonly", "yes" ]

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: finansal_rates
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - finansal_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.4.0
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - bootstrap.memory_lock=true
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - finansal_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'" ]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OpenSearch Dashboards
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.4.0
    container_name: opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      - "OPENSEARCH_HOSTS=http://opensearch:9200"
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    networks:
      - finansal_network
    depends_on:
      - opensearch

  # Filebeat
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.6.0
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./logs:/logs:ro
    networks:
      - finansal_network
    depends_on:
      - opensearch

  # TCP Platform Simulator
  tcp-simulator:
    build:
      context: ./demo
    container_name: tcp-simulator
    ports:
      - "8081:8081"
    networks:
      - finansal_network
    volumes:
      - ./demo/logs:/app/logs
      - ./demo/config:/app/config
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # REST Platform Simulator
  rest-simulator:
    build:
      context: ./platform-simulator-rest
    container_name: rest-simulator
    ports:
      - "8080:8080"
    networks:
      - finansal_network
    volumes:
      - ./platform-simulator-rest/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FIX Platform Simulator
  fix-simulator:
    build:
      context: ./fix-simulator
    container_name: fix-simulator
    ports:
      - "8082:8082"
    networks:
      - finansal_network
    volumes:
      - ./fix-simulator/logs:/app/logs
      - ./fix-simulator/config:/app/config
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main Application
  main-app:
    build:
      context: ./main-app
    container_name: main-app
    ports:
      - "8090:8090"
    networks:
      - finansal_network
    volumes:
      - ./main-app/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka
      - redis
      - opensearch
      - tcp-simulator
      - rest-simulator
      - fix-simulator
    environment:
      - TCP_PLATFORM_HOST=tcp-simulator
      - TCP_PLATFORM_PORT=8081
      - REST_PLATFORM_HOST=rest-simulator
      - REST_PLATFORM_PORT=8080
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_RATES=finansal.rates
      - OPENSEARCH_URL=http://opensearch:9200
      - cache.type=memory
      - spring.main.allow-bean-definition-overriding=true
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"


  # Kafka Consumer for PostgreSQL
  kafka-consumer:
    build:
      context: ./Kafka-Consumer
    container_name: kafka-consumer
    networks:
      - finansal_network
    volumes:
      - ./Kafka-Consumer/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka
      - postgres
      - main-app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/finansal_rates
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_RATES=finansal.rates
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Kafka Consumer for OpenSearch
  kafka-consumer-opensearch:
    build:
      context: ./Kafka-Consumer-OpenSearch
    container_name: kafka-consumer-opensearch
    networks:
      - finansal_network
    volumes:
      - ./Kafka-Consumer-OpenSearch/logs:/app/logs
    restart: unless-stopped
    depends_on:
      - kafka
      - opensearch
      - main-app
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_RATES=finansal.rates
      - OPENSEARCH_URL=http://opensearch:9200
      - spring.main.allow-bean-definition-overriding=true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  zookeeper-data:
  kafka-data:
  redis-data:
  postgres-data:
  opensearch-data:

networks:
  finansal_network:
    driver: bridge